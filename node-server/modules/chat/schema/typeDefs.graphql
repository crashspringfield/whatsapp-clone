type Query {
  chats: [Chat!]!
  chat (chatId: ID!): Chat
}

type Subscription {
  chatAdded: Chat
  chatUpdated: Chat
}

type Mutation {
  addChat(userId: ID!): Chat
  removeChat(chatId: ID!): ID

  addAdmins(groupId: ID!, userId: [ID!]!): [ID]!
  removeAdmins(groupId: ID!, userId: [ID!]!): [ID]!

  addMembers(groupId: ID!, userIds: [ID!]!): [ID]!
  removeMembers(groupId: ID!, userIds: [ID!]!): [ID]!

  addGroup(userIds: [ID!]!, groupName: String!, groupPicture: String): Chat
  updateGroup(chatId: ID!, groupName: String, groupPicture: String): Chat
}

type Chat {
  #May be a chat or a group
  id: ID!
  #Computed for chats
  name: String
  #Computed for chats
  picture: String
  #All members, current and past
  allTimeMembers: [User!]!
  #Whoever gets the chat listed
  listingMembers: [User!]!
  #Actual members of the groups. Null for chats
  actualGroupMembers: [User!]
  #Admins are null for chats
  admins: [User!]
  #If a group is read-only
  owner: User
  #Computed property
  isGroup: Boolean!
}
